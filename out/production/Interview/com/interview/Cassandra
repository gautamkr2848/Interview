Apache Cassandra is an open source distributed NoSQL database.

Features
    Stores structured, semi-structured, unstructured data
    Simple Design
    Highly available
    Horizontal scaling
    Faster than SQL

Cassandra work
    1. Cassandra is capable of handling petabytes of information and thousands of concurrent requests per second
    2. Cassandra is a partitioned row store database
    3. Cassandra's uses CQL language for accessing DB.
    4. Cassandra provides automatic data distribution across all nodes in a database cluster.
    5. Cassandra also provides customizable replication strategy.
    6. Cassandra supplies linear scalability. For example, if 2 nodes can handle 100,000 transactions per second,
        4 nodes will support 200,000 transactions/sec and 8 nodes will tackle 400,000 transactions/sec.


Key structures
1. Node - Where you store your data.
2. DataCentre - Collection of nodes
3. Cluster - Collection of data centres
4. Commit log - All data is written first to the commit log for durability
5. Memtable - Temporary table commit log => memtable

Data distribution handled by using consistent hashing

Storage Engine
1. Cassandra uses a storage structure similar to a Log-Structured Merge Tree
2. Cassandra avoids reading before writing. Read-before-write, especially in a large distributed
    system, can result in performance issue
3. To avoid using read-before-write for most writes in Cassandra, the storage engine groups inserts and updates
   in memory, and at intervals, sequentially writes the data to disk in append mode. Once written to disk, the data
   is immutable and is never overwritten. Reading data involves combining this immutable sequentially-written data to
   discover the correct query results.

Data Write
    Logging data in the commit log
    Writing data to the memtable  -  in a memory data structure
    Flushing data from the memtable
    Storing data on disk in SSTables

How is data maintained?
    The Cassandra write process stores data in files called SSTables. SSTables are immutable.
    Instead of overwriting existing rows with inserts or updates, Cassandra writes new timestamped
    versions of the inserted or updated data in new SSTables. Cassandra does not perform deletes by
    removing the deleted data: instead, Cassandra marks it with tombstones.

    Over time, Cassandra may write many versions of a row in different SSTables. Each version may
    have a unique set of columns stored with a different timestamp. As SSTables accumulate,
    the distribution of data can require accessing more and more SSTables to retrieve a complete row.

Compaction
    To keep the database healthy, Cassandra periodically merges SSTables and discards old data.
    This process is called compaction.

Data Read
    1. Check the memtable
    2. Check row cache, if enabled
    3. Fetches the data from the SSTable on disk

Consistent read and write
    Cassandra is a AP(availability and partition tolerance) system according to the CAP theorem.
    Cassandra does have flexibility in its configuration, though, and can perform more
    like a CP (consistent and partition tolerant) system according to the CAP theorem, depending
    on the application requirements.

Cassandra transactions
    1. Cassandra does not use RDBMS ACID transactions with rollback or locking mechanisms, but
        instead offers atomic, isolated, and durable transactions.
    2. As a non-relational database, Cassandra does not support joins or foreign keys, and
        does not offer consistency in the ACID sense.

HBASE & Redis provides Consistency and Partition tolerance.
MongoDB, CouchDB, Cassandra and Dynamo guarantee only availability but no consistency.