The Bridge design pattern allows you to separate the abstraction from the implementation.

There are 2 parts in Bridge design pattern :
    Abstraction
    Implementation

Elements of Bridge Design Pattern

Abstraction – core of the bridge design pattern and defines the crux. Contains a reference to the implementer.
Refined Abstraction – Extends the abstraction takes the finer detail one level below. Hides the finer elements from implementers.
Implementer – It defines the interface for implementation classes. This interface does not need to correspond directly to the abstraction interface and can be very different. Abstraction imp provides an implementation in terms of operations provided by the Implementer interface.
Concrete Implementation – Implements the above implementer by providing the concrete implementation.

The Bridge pattern prefers, “prefer composition over inheritance”.

Without Bridge Design Pattern

              --------------Vehicle---------------
              |                                   |
     --------Bus--------                  -------Bike-------
     |                  |                 |                 |
ProduceBus          AssembleBus      ProduceBike         AssembleBike


With Bridge Design Pattern

         Vehicle------------------------------------------------Workshop
            |                                                       |
  ______________________                                 ----------------------
  |                     |                               |                       |
Bus                   Bike                            Produce               Assemble

Advantages

Bridge pattern decouple an abstraction from its implementation so that the two can vary independently.
It is used mainly for implementing platform independence features.


// Java code to demonstrate bridge design pattern

// abstraction in bridge pattern
abstract class Vehicle {
	protected Workshop workShop1;
	protected Workshop workShop2;

	protected Vehicle(Workshop workShop1, Workshop workShop2)
	{
		this.workShop1 = workShop1;
		this.workShop2 = workShop2;
	}

	abstract public void manufacture();
}

// Refine abstraction 1 in bridge pattern
class Car extends Vehicle {
	public Car(Workshop workShop1, Workshop workShop2)
	{
		super(workShop1, workShop2);
	}

	@Override
	public void manufacture()
	{
		System.out.print("Car ");
		workShop1.work();
		workShop2.work();
	}
}

// Refine abstraction 2 in bridge pattern
class Bike extends Vehicle {
	public Bike(Workshop workShop1, Workshop workShop2)
	{
		super(workShop1, workShop2);
	}

	@Override
	public void manufacture()
	{
		System.out.print("Bike ");
		workShop1.work();
		workShop2.work();
	}
}

// Implementer for bridge pattern
interface Workshop
{
	abstract public void work();
}

// Concrete implementation 1 for bridge pattern
class Produce implements Workshop {
	@Override
	public void work()
	{
		System.out.print("Produced");
	}
}

// Concrete implementation 2 for bridge pattern
class Assemble implements Workshop {
	@Override
	public void work()
	{
		System.out.print(" And");
		System.out.println(" Assembled.");
	}
}

// Demonstration of bridge design pattern
class BridgePattern {
	public static void main(String[] args)
	{
		Vehicle vehicle1 = new Car(new Produce(), new Assemble());
		vehicle1.manufacture();
		Vehicle vehicle2 = new Bike(new Produce(), new Assemble());
		vehicle2.manufacture();
	}
}
