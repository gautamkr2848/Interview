Design Patterns in Java
A design patterns are well-proved solution for solving the specific problem/task.

Problem Given:
Suppose you want to create a class for which only a single instance should be created and that single
object can be used by all other classes.

Solution:
Singleton design pattern is the best solution of above specific problem.

1.Creational Design Pattern

    Factory Pattern
        A Factory Pattern says that just define an interface or abstract class for creating an object
        but let the subclasses decide which class to instantiate.

        Advantage of Factory Design Pattern
            1. Factory Method Pattern allows the sub-classes to choose the type of objects to create.
            2. It promotes the loose-coupling

    Abstract Factory Pattern
        Abstract Factory Pattern says that just define an interface or abstract class for creating families
        of related (or dependent) objects but without specifying their concrete sub-classes.

    Singleton Pattern
        Singleton Pattern says that just define a class that has only one instance and provides a global
        point of access to it.
            a. Early Instantiation
            b. Lazy Instantiation

    Prototype Pattern
        Prototype Pattern says that cloning of an existing object instead of creating new one and can
        also be customized as per the requirement.
            a. When the cost of creating an object is expensive
            b. When the classes are instantiated at runtime
            c. When you want to keep the number of classes in an application minimum

    Builder Pattern
        The builder pattern is a design pattern designed to provide a flexible solution to various
        object creation based on parameters.

2. Structural Design Pattern
    Structural design patterns are concerned with how classes and objects can be composed, to form larger structures.

    Adapter Pattern
        Converting an interface into another based on requirement.

        Advantage of Adapter Pattern
            1. It allows two or more previously incompatible objects to interact.
            2. It allows reusability of existing functionality.

    Bridge Pattern
    Composite Pattern
    Decorator Pattern
        A Decorator Pattern says that just attach a flexible additional responsibilities to an object dynamically.

    Facade Pattern
    Flyweight Pattern
        A Flyweight Pattern says that just to reuse already existing similar kind of objects by storing
        them and create new object when no matching object is found.

    Proxy Pattern
        Simply, proxy means an object representing another object.

3. Behavioral Design Pattern

    Chain Of Responsibility Pattern
    Command Pattern
    Interpreter Pattern
    Iterator Pattern
    Mediator Pattern
    Memento Pattern
    Observer Pattern
    State Pattern
    Strategy Pattern
    Template Pattern
    Visitor Pattern
         It is used when we have to perform an operation on a group of similar kind of Objects.

         The visitor pattern consists of two parts:
             1. Visit() method which is implemented by the visitor and is called for every element in
                the data structure
             2. visitable classes providing Accept() methods that accept a visitor

         eg -

         Fruits - mango, apple, guava
         Electronics - mobile, tv, laptop

         In place of giving discount on each item, give discount as 10% on electronics and 5% on fruits
